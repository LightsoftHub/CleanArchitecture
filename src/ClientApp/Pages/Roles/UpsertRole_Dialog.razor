<MudDialog>
    <DialogContent>

        @if (Role != null)
        {
            <EditForm Model="@Role" method="post" OnValidSubmit=OnSubmit FormName="editForm" class="d-grid gap-3">

                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-sm-4">
                        <MudTextField @bind-Value=Role.Name Label="Name" />
                    </div>
                    <div class="col-sm-8">
                        <MudTextField @bind-Value=Role.Description Label="Description" AutoGrow="true" />
                    </div>
                </div>

                <div class="mt-3">
                    <h4>Permissions</h4>

                    @foreach (var group in appClaims.Groups)
                    {
                        var groupClaims = appClaims.Claims.Where(x => x.GroupName == group.Name);

                        var isChecked = groupClaims.All(x => x.IsOwned == true);

                        <MudCheckBox
                        Label="@group.ToString()" Dense="true"
                        @bind-Value:get="isChecked"
                        @bind-Value:set="c => OnResourceTypeVisibilityChanged(group.Name, c)" />

                        @foreach (var claim in groupClaims)
                        {
                            <MudCheckBox
                            Label="@claim.Name" Dense="true" Size="Size.Small" Color="Color.Primary"
                            Style="margin-left: 25px"
                            @bind-Value="claim.IsOwned"></MudCheckBox>
                        }
                    }

                </div>

            </EditForm>
        }
        else
        {
            <EditForm Model="@newRole" method="post" OnValidSubmit=OnSubmit FormName="createForm" class="d-grid gap-3">

                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-sm-4">
                        <MudTextField @bind-Value=newRole.Name Label="Name" />
                    </div>
                    <div class="col-sm-8">
                        <MudTextField @bind-Value=newRole.Description Label="Description" AutoGrow="true" />
                    </div>
                </div>

            </EditForm>
        }

    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSubmit">Save</MudButton>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance dialog { get; set; } = default!;

    [Parameter]
    public RoleDto? Role { get; set; }

    private CreateRoleRequest newRole = new();

    private AppClaimsVm appClaims = ClientClaimsExtensions.GetAll();

    protected override async Task OnInitializedAsync()
    {
        if (Role != null)
        {
            var roleDetails = await RoleService.GetByIdAsync(Role.Id);

            Role = roleDetails.Data;

            foreach (var claim in Role.Claims)
            {
                var appClaim = appClaims.Claims.Where(x => x.Value == claim.Value).FirstOrDefault();

                if (appClaim != null)
                {
                    appClaim.IsOwned = true;
                }
            }
        }
    }

    private async Task OnSubmit()
    {
        if (Role != null)
        {
            Role.Claims = appClaims.Claims
                .Where(x => x.IsOwned == true)
                .Select(s => new ClaimDto
                {
                    Type = ClaimTypes.Permission,
                    Value = s.Value
                })
                .ToList();
            
            await CallGuarded.ExecuteAsync(
                () => RoleService.UpdateAsync(Role),
                $"Role {newRole.Name} updated",
                dialog);
        }
        else
        {
            await CallGuarded.ExecuteAsync(
                () => RoleService.CreateAsync(newRole),
                $"New role {newRole.Name} created",
                dialog);
        }
    }

    private void OnResourceTypeVisibilityChanged(string resourceType, bool isVisible)
    {
        var groupClaims = appClaims.Claims.Where(x => x.GroupName == resourceType);

        foreach (var groupClaim in groupClaims)
        {
            groupClaim.IsOwned = isVisible;
        }
    }
}
